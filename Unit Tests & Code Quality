from django.contrib import admin
from django.db import models
from django.utils.translation import get_language
from ckeditor.fields import RichTextField
from rest_framework import serializers, viewsets
from django.urls import path, include
from django.utils.translation import gettext_lazy as _
from django.conf import settings
from django.core.cache import cache
from rest_framework.response import Response
from drf_yasg.views import get_schema_view
from drf_yasg import openapi
from rest_framework.permissions import AllowAny
from rest_framework.routers import DefaultRouter
from googletrans import Translator

translator = Translator()


class FAQ(models.Model):
    question = models.TextField()
    answer = RichTextField(config_name='default')

    # Language-specific translations
    question_hi = models.TextField(blank=True, null=True)
    question_bn = models.TextField(blank=True, null=True)
    question_es = models.TextField(blank=True, null=True)
    question_fr = models.TextField(blank=True, null=True)

    answer_hi = RichTextField(blank=True, null=True, config_name='default')
    answer_bn = RichTextField(blank=True, null=True, config_name='default')
    answer_es = RichTextField(blank=True, null=True, config_name='default')
    answer_fr = RichTextField(blank=True, null=True, config_name='default')

    def save(self, *args, **kwargs):
        """
        Automatically translate question and answer to multiple languages if missing.
        """
        supported_languages = ["hi", "bn", "es", "fr"]

        for lang in supported_languages:
            question_field = f"question_{lang}"
            answer_field = f"answer_{lang}"

            if not getattr(self, question_field):
                setattr(self, question_field, self.translate_text(self.question, lang))

            if not getattr(self, answer_field):
                setattr(self, answer_field, self.translate_text(self.answer, lang))

        super().save(*args, **kwargs)

    def translate_text(self, text, lang):
        """
        Uses Google Translate API to translate text.
        """
        try:
            return translator.translate(text, dest=lang).text
        except Exception:
            return text  # Fallback to original text if translation fails

    def get_translated_text(self, field_name, lang_code=None):
        """
        Fetches translated text from cache or DB.
        """
        if lang_code is None:
            lang_code = get_language()

        cache_key = f"faq_{self.id}_{field_name}_{lang_code}"
        cached_value = cache.get(cache_key)

        if cached_value:
            return cached_value

        translated_field = f"{field_name}_{lang_code}"
        value = getattr(self, translated_field, None) or getattr(self, field_name)

        cache.set(cache_key, value, timeout=86400)  # Cache for 24 hours
        return value

    def __str__(self):
        return self.question[:50]


@admin.register(FAQ)
class FAQAdmin(admin.ModelAdmin):
    list_display = ("question",)
    search_fields = ("question", "answer")
    list_filter = ("question",)
    ordering = ("question",)
class FAQSerializer(serializers.ModelSerializer):
    question = serializers.SerializerMethodField()
    answer = serializers.SerializerMethodField()

    class Meta:
        model = FAQ
        fields = ["id", "question", "answer"]

    def get_question(self, obj):
        request = self.context.get("request")
        lang_code = request.GET.get("lang", "en")
        return obj.get_translated_text("question", lang_code)

    def get_answer(self, obj):
        request = self.context.get("request")
        lang_code = request.GET.get("lang", "en")
        return obj.get_translated_text("answer", lang_code)


class FAQViewSet(viewsets.ModelViewSet):
    """
    API for managing FAQs with language selection via ?lang= parameter.
    Supports Create, Read, Update, Delete operations.
    """
    queryset = FAQ.objects.all()
    serializer_class = FAQSerializer

    def list(self, request, *args, **kwargs):
        """
        Optimized retrieval with pre-translation and Redis caching.
        """
        lang_code = request.GET.get("lang", "en")
        queryset = self.get_queryset()

        for faq in queryset:
            faq.pre_translated_question = faq.get_translated_text("question", lang_code)
            faq.pre_translated_answer = faq.get_translated_text("answer", lang_code)

        serializer = self.get_serializer(queryset, many=True)
        return Response(serializer.data)

router = DefaultRouter()
router.register(r'faqs', FAQViewSet, basename='faq')

# API documentation (Swagger UI)
schema_view = get_schema_view(
    openapi.Info(
        title="FAQ API",
        default_version="v1",
        description="API for managing FAQs with multilingual support, auto-translation, and caching",
    ),
    public=True,
    permission_classes=(AllowAny,),
)

urlpatterns = [
    path("api/", include(router.urls)),
    path("api/docs/", schema_view.with_ui("swagger", cache_timeout=0), name="swagger-docs"),
    path("admin/", admin.site.urls),
]


import pytest
from rest_framework.test import APIClient
from django.urls import reverse

@pytest.mark.django_db
def test_faq_creation():
    """
    Test creating an FAQ.
    """
    faq = FAQ.objects.create(question="What is Django?", answer="Django is a web framework.")
    assert FAQ.objects.count() == 1
    assert faq.question == "What is Django?"

@pytest.mark.django_db
def test_faq_api_response():
    """
    Test API response for FAQs.
    """
    client = APIClient()
    FAQ.objects.create(question="What is Django?", answer="Django is a web framework.")
    
    response = client.get(reverse("faq-list"))
    assert response.status_code == 200
    assert len(response.data) == 1


CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',
        'height': 300,
        'width': '100%',
        'extraPlugins': 'justify,colorbutton,font',
    }
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}
